using Amazon.Lambda.Core;
using Amazon.Lambda.SQSEvents;
using System.Text.Json;
using Amazon.SQS;
using Amazon.SQS.Model;
using Amazon.Translate;
using Amazon.Translate.Model;
using Amazon.Runtime;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]

namespace TicketProcessingFunction;

public class Function
{
    /// <summary>
    /// Default constructor. This constructor is used by Lambda to construct the instance. When invoked in a Lambda environment
    /// the AWS credentials will come from the IAM role associated with the function and the AWS region will be set to the
    /// region the Lambda function is executed in.
    /// </summary>
    public Function()
    {

    }


    /// <summary>
    /// This method is called for every Lambda invocation. This method takes in an SQS event object and can be used 
    /// to respond to SQS messages.
    /// </summary>
    /// <param name="evnt"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)
    { 
        try {
            foreach (var message in evnt.Records)
            {
                await ProcessMessageAsync(message, context);
            }
        }
        catch (Exception ex)
        {
            context.Logger.LogLine($"Error processing message: {ex.Message}");
        }
    }

    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)
    {

        AmazonSQSClient sqsClient = new AmazonSQSClient();
        context.Logger.LogInformation($"Parsing Message {message.Body}");
        //json generated by the InsuranceDataService should already be valid
        processXML(message.Body);
        // no need to delete message from queue: If your function successfully processes the batch, Lambda deletes the messages from the queue
        // "By default, if your function encounters an error while processing a batch, all messages in that batch become visible
        // in the queue again" - https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
        await Task.CompletedTask;
    }

    private static void processXML(String jsonFileContent)
    {
        DriverUpQueueMessage message = JsonSerializer.Deserialize<DriverUpQueueMessage>(jsonFileContent);
        // do something, possibly send color make model to email, language to translate AWS
        // "dear [name], "\n
        if (message.isFromCali)
        {
            Console.WriteLine("Patient with ID {0}: policyNumber = {1}, provider = {2}", message.carMake, message.carModel, message.carColor, message.prefLanguage, message.personName, message.email);
        }
        else
        {
            Console.WriteLine("Patient with ID {0} does not have medical insurance", message.patientID);
        }
    }
    
    public async Task TranslateComment(string intro, string language)
    {

        
        AmazonTranslateClient client = new AmazonTranslateClient();

        try
        {
            TranslateTextRequest request = new TranslateTextRequest();
            request.Text = intro;
            request.SourceLanguageCode = "en";
            request.TargetLanguageCode = language;
            TranslateTextResponse response = await client.TranslateTextAsync(request);
        } catch(AmazonTranslateException e)
        {
            Console.WriteLine(e.Message);
        }
    }
}